{"entries":[{"timestamp":1728504835936,"editorVersion":"7.0.42","changes":[{"type":"edited","filename":"main.blocks","patch":[{"diffs":[[0,"http"],[-1,"s"],[0,"://"],[-1,"developers.google.com/blockly/xml\"><variables></variables><block type=\"pxt-on-start\" id=\"!Z*IL/UNZ[4.YSZs{vwE\" x=\"20\" y=\"20"],[1,"www.w3.org/1999/xhtml\">\n  <block type=\"pxt-on-start"],[0,"\"></"]],"start1":12,"start2":12,"length1":135,"length2":62},{"diffs":[[0,"</block>"],[1,"\n  "],[0,"<block t"]],"start1":72,"start2":72,"length1":16,"length2":19},{"diffs":[[0,"ver\""],[-1," id=\"A%8,@OEDSnrU?Md*gkD8\" x=\"225\" y=\"20\""],[0,"></b"]],"start1":107,"start2":107,"length1":49,"length2":8},{"diffs":[[0,"</block>"],[1,"\n"],[0,"</xml>"]],"start1":112,"start2":112,"length1":14,"length2":15}]},{"type":"edited","filename":"main.ts","patch":[{"diffs":[[-1,"basic.forever(function () {\n\t\n})"],[0,"\n"]],"start1":0,"start2":0,"length1":33,"length2":1}]},{"type":"edited","filename":"pxt.json","patch":[{"diffs":[[0,".md\""],[-1,",\n        \"custom.ts\",\n        \"test.ts\"\n    ],\n    \"testFiles\": [\n        \"test.ts\"\n    ],\n    \"preferredEditor\": \"tsprj\""],[1,"\n    ],\n    \"additionalFilePaths\": []"],[0,"\n}\n"]],"start1":224,"start2":224,"length1":129,"length2":44}]},{"type":"added","filename":"test.ts","value":"// Add your code here\n//tests go here, will not be compiled when it is used as an extension\nlet statusByte: number = 0\nlet note: number = 0\nlet velocity: number = 0\nlet inNoteOnMessage: boolean = false\nbasic.showLeds(`\n. . . . .\n. . # . .\n. . # . .\n. . . . .\n. . . . .\n`)\n\nmidiInOut.setMidiPins(SerialPin.P2, SerialPin.P1);\n\ninput.onButtonPressed(Button.A, function () {\n    let myNote = randint(40, 80)\n    led.plot(2, 3);\n    midiInOut.sendNoteOn(myNote, 127, 1)\n    basic.pause(100)\n    led.unplot(2, 3);\n    midiInOut.sendNoteOff(myNote, 127, 1)\n    basic.pause(100)\n})\n\n\n\nloops.everyInterval(1, function () {\n    // Continuously read from the serial input\n\n    let incomingByte = serial.readBuffer(1)[0] // Read one byte at a time\n    //basic.pause(100)\n    // Ignore timing clock (248) and active sensing (254)\n    if (incomingByte == 248 || incomingByte == 254) {\n        return // Skip processing for 248 and 254\n    }\n\n    //basic.pause(100)\n    // Check if it's a status byte (Note On)\n    if (incomingByte >= 128) {\n        // Status byte, check if it's Note On (0x90 to 0x9F)\n        if (incomingByte == 144) {\n            statusByte = incomingByte\n            inNoteOnMessage = true // Set flag to expect note and velocity bytes\n        } else {\n            inNoteOnMessage = false // Not a Note On message\n        }\n    } else {\n        // If it's a data byte and we're in a Note On message\n        if (inNoteOnMessage) {\n            if (note == 0) {\n                note = incomingByte // First data byte is the note\n            } else {\n                velocity = incomingByte // Second data byte is the velocity\n                handleNoteOn(note, velocity)\n                // Reset after handling\n                inNoteOnMessage = false\n                note = 0\n                velocity = 0\n            }\n        }\n    }\n})\n\n\n\n// Function to handle Note On message\nfunction handleNoteOn(note: number, velocity: number) {\n\n    midiInOut.sendSerial(\"Note\", note)\n\n    if (velocity > 0) {\n        // Respond to the note on event\n        //basic.showNumber(note) // Display note number on the LED matrix\n        music.playTone(helperNoteFreq[note % 24], music.beat(BeatFraction.Half)) // Play a tone based on note number\n    } else {\n        basic.clearScreen() // Clear LED if velocity is 0 (Note Off)\n    }\n}\n\nlet helperNoteFreq: number[] = [131, 139, 147, 156, 165, 175, 185, 196, 208, 220, 233, 247, 262, 277, 294, 311, 330, 349, 370, 392, 415, 440, 466, 494, 523, 555, 587, 622, 659, 698, 740, 784, 831, 880, 932, 988]\n"},{"type":"added","filename":"custom.ts","value":"//midi channel 0 is actually 1\n\nconst NOTE_ON = 0x90\nconst NOTE_OFF = 0x80\n\nlet globalMidiIn = SerialPin.P1\nlet globalMidiOut = SerialPin.P2\n\n/**\n * Custom blocks\n */\n//% weight=100 color=#0fbc11 icon=\"ï„˜\"\nnamespace midiInOut {\n    /**\n     * send a midi note\n     * @param note note number\n     */\n    //% block=\"send noteOn $note with velocity $velocity on channel $channel\"\n    export function sendNoteOn(note: number, velocity: number, channel: number) {\n        let midiMessage = pins.createBuffer(3);\n        midiMessage.setNumber(NumberFormat.UInt8LE, 0, NOTE_ON | channel);\n        midiMessage.setNumber(NumberFormat.UInt8LE, 1, note);\n        midiMessage.setNumber(NumberFormat.UInt8LE, 2, velocity);\n        serial.writeBuffer(midiMessage);\n    }\n\n    /**\n     * send a midi noteOff\n     * @param note note number\n     */\n    //% block=\"send noteOff $note with velocity $velocity on channel $channel\"\n    export function sendNoteOff(note: number, velocity: number, channel: number) {\n        let midiMessage = pins.createBuffer(3);\n        midiMessage.setNumber(NumberFormat.UInt8LE, 0, NOTE_OFF | channel);\n        midiMessage.setNumber(NumberFormat.UInt8LE, 1, note);\n        midiMessage.setNumber(NumberFormat.UInt8LE, 2, velocity);\n        serial.writeBuffer(midiMessage);\n    }\n\n    /**\n     * set midi pins\n     * @param note note number\n     */\n    //% block=\"MIDI out pin = $midiOut MIDI in pin = $midiIn\"\n    export function setMidiPins(midiOut: SerialPin, midiIn: SerialPin) {\n        serial.redirect(\n            midiOut,\n            midiIn,\n            BaudRate.BaudRate31250\n        )\n        globalMidiIn = midiIn\n        globalMidiOut = midiOut\n    }\n\n    /**\n     * send serial\n     *\n     */\n    //% block=\"send USB serial: name = $what value = $value\"\n    export function sendSerial(what: string, value: number) {\n        serial.redirectToUSB()\n        serial.writeValue(what, value)\n        serial.redirect(\n            globalMidiOut,\n            globalMidiIn,\n            BaudRate.BaudRate31250\n        )\n    }\n\n}\n\n\n\nfunction bytesToArray(bits: number) {\n    let noteArray = [];\n    let bitCheckMask = 1\n    let arrayPos = 0;\n    for (let i = 0; i <= 16 - 1; i++) {\n        if (bitCheckMask & bits) {\n            noteArray.push(i);\n        }\n        bitCheckMask = bitCheckMask << 1;\n    }\n    return noteArray;\n}"}]}],"snapshots":[{"timestamp":1728504835935,"editorVersion":"7.0.42","text":{"main.blocks":"<xml xmlns=\"http://www.w3.org/1999/xhtml\">\n  <block type=\"pxt-on-start\"></block>\n  <block type=\"device_forever\"></block>\n</xml>","main.ts":"\n","README.md":"","pxt.json":"{\n    \"name\": \"pxt-microMidi\",\n    \"description\": \"\",\n    \"dependencies\": {\n        \"core\": \"*\",\n        \"radio\": \"*\",\n        \"microphone\": \"*\"\n    },\n    \"files\": [\n        \"main.blocks\",\n        \"main.ts\",\n        \"README.md\"\n    ],\n    \"additionalFilePaths\": []\n}\n"}}],"shares":[],"lastSaveTime":1728505010718}